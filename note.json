{"paragraphs":[{"text":"%md\n\n## Intro\n\nThis notebook is an example of how to use Apache Flink for processing stream of data. We will show with one simple exemple of how to generate a stream of random geographic coordinates and next binding them to a custom map made with Leaflet using Angular interpreter.","user":"anonymous","dateUpdated":"2017-06-08T13:52:38+0200","config":{"tableHide":false,"editorSetting":{"language":"markdown","editOnDblClick":true},"colWidth":12,"editorMode":"ace/mode/markdown","editorHide":true,"results":{},"enabled":true},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[{"type":"HTML","data":"<div class=\"markdown-body\">\n<h2>Intro</h2>\n<p>This notebook is an example of how to use Apache Flink for processing stream of data. We will show with one simple exemple of how to generate a stream of random geographic coordinates and next binding them to a custom map made with Leaflet using Angular interpreter.</p>\n</div>"}]},"apps":[],"jobName":"paragraph_1496758508128_-1104143915","id":"20170530-154344_1072392471","dateCreated":"2017-06-06T16:15:08+0200","dateStarted":"2017-06-08T13:52:38+0200","dateFinished":"2017-06-08T13:52:38+0200","status":"FINISHED","progressUpdateIntervalMs":500,"focus":true,"$$hashKey":"object:1184"},{"text":"%md\n\n## Generating the Data\n\nThe following paragraph show the code needed to create a source able to generate a `DataStream` of location rapresented by the case class `Locc(lat: Double, lon: Double)`. We put a  `Thread.sleep(500)` in the source only for a better visualization on the map.\n","dateUpdated":"2017-06-08T14:09:07+0200","config":{"tableHide":false,"editorSetting":{"language":"markdown","editOnDblClick":true},"colWidth":12,"editorMode":"ace/mode/markdown","editorHide":true,"results":{},"enabled":true},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[{"type":"HTML","data":"<div class=\"markdown-body\">\n<h2>Generating the Data</h2>\n<p>The following paragraph show the code needed to create a source able to generate a <code>DataStream</code> of location rapresented by the case class <code>Locc(lat: Double, lon: Double)</code>. We put a <code>Thread.sleep(500)</code> in the source only for a better visualization on the map.</p>\n</div>"}]},"apps":[],"jobName":"paragraph_1496758508139_-1106837157","id":"20170530-154346_561698221","dateCreated":"2017-06-06T16:15:08+0200","status":"FINISHED","progressUpdateIntervalMs":500,"$$hashKey":"object:1188","user":"anonymous","dateFinished":"2017-06-08T14:09:07+0200","dateStarted":"2017-06-08T14:09:07+0200"},{"text":"%flink\n\nimport org.apache.flink.streaming.api.functions.sink.SinkFunction\nimport org.apache.flink.streaming.api.functions.source.SourceFunction.SourceContext\nimport _root_.scala.util.Random\nimport _root_.scala.collection.JavaConversions._\nimport org.apache.flink.contrib.streaming.DataStreamUtils\n\ncase class Loc(lat: Double, lon: Double)\nval random = new Random()\n\nval randomStringStream = senv.addSource { (ctx: SourceContext[Loc]) =>\n  while (true) {\n    Thread.sleep(500)\n    ctx.collect(Loc( (Random.nextDouble() * -180.0) + 90.0, (Random.nextDouble() * -360.0) + 180.0))\n  }\n}\n\nval iterator = DataStreamUtils.collect(randomStringStream.javaStream)\niterator.foreach(x => zFlink.angularBind(\"locations\", x))","dateUpdated":"2017-06-06T16:15:08+0200","config":{"colWidth":12,"editorMode":"ace/mode/scala","results":{},"enabled":true,"editorSetting":{"language":"scala","editOnDblClick":false}},"settings":{"params":{},"forms":{}},"apps":[],"jobName":"paragraph_1496758508139_-1106837157","id":"20170605-130749_870845179","dateCreated":"2017-06-06T16:15:08+0200","status":"READY","errorMessage":"","progressUpdateIntervalMs":500,"$$hashKey":"object:1189"},{"text":"%md\n\n## Show locations on the map\nWe made a map using `Leaflet` library. Next, using Zeppelin api, we watched in the current scope for catching the income object called `locations` from the back-end.","dateUpdated":"2017-06-08T14:09:01+0200","config":{"tableHide":false,"editorSetting":{"language":"markdown","editOnDblClick":true},"colWidth":12,"editorMode":"ace/mode/markdown","editorHide":true,"results":{},"enabled":true},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[{"type":"HTML","data":"<div class=\"markdown-body\">\n<h2>Show locations on the map</h2>\n<p>We made a map using <code>Leaflet</code> library. Next, using Zeppelin api, we watched in the current scope for catching the income object called <code>locations</code> from the back-end.</p>\n</div>"}]},"apps":[],"jobName":"paragraph_1496758508139_-1106837157","id":"20170530-155046_1847449451","dateCreated":"2017-06-06T16:15:08+0200","status":"FINISHED","progressUpdateIntervalMs":500,"$$hashKey":"object:1190","user":"anonymous","dateFinished":"2017-06-08T14:09:01+0200","dateStarted":"2017-06-08T14:09:01+0200"},{"text":"%angular\n\n<!-- place this in an %angular paragraph -->\n\n<link rel=\"stylesheet\" href=\"https://cdnjs.cloudflare.com/ajax/libs/leaflet/0.7.5/leaflet.css\" />\n\n<div id=\"map\" style=\"height: 800px; width: 100%\"></div>\n\n<script type=\"text/javascript\">\nfunction initMap() {\n    var map = L.map('map').setView([30.00, -30.00], 3);\n    L.tileLayer('http://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png', {\n        attribution: 'Map data &copy; <a href=\"http://openstreetmap.org\">OpenStreetMap</a> contributors',\n        maxZoom: 12,\n        minZoom: 3\n    }).addTo(map);\n\n    var geoMarkers = L.layerGroup().addTo(map);\n\n    var el = angular.element($('#map').parent('.ng-scope'));\n    angular.element(el).ready(function() {\n        window.locationWatcher = el.scope().compiledScope.$watch('locations', function(newValue, oldValue) {\n            console.log(\"new\", newValue)\n            console.log(\"old\", oldValue)\n            var markers = [newValue]\n            angular.forEach(markers, function(point) {\n                var lat = point.lat;\n                var lon = point.lon;\n                var marker = L.marker([lat, lon]).addTo(geoMarkers);\n            });\n        })\n    });\n}\n\nif (window.locationWatcher) {\n    // clear existing watcher otherwise we'll have duplicates\n    window.locationWatcher();\n}\n\n// ensure we only load the script once, seems to cause issues otherwise\nif (window.L) {\n    initMap();\n} else {\n    console.log('Loading Leaflet library');\n    var sc = document.createElement('script');\n    sc.type = 'text/javascript';\n    sc.src = 'https://cdnjs.cloudflare.com/ajax/libs/leaflet/0.7.5/leaflet.js';\n    sc.onload = initMap;\n    sc.onerror = function(err) { alert(err); }\n    document.getElementsByTagName('head')[0].appendChild(sc);\n}\n</script>","dateUpdated":"2017-06-08T14:09:12+0200","config":{"tableHide":false,"editorSetting":{"language":"scala","editOnDblClick":true},"colWidth":12,"editorMode":"ace/mode/undefined","editorHide":true,"results":{},"enabled":true},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[{"type":"ANGULAR","data":"<!-- place this in an %angular paragraph -->\n\n<link rel=\"stylesheet\" href=\"https://cdnjs.cloudflare.com/ajax/libs/leaflet/0.7.5/leaflet.css\" />\n\n<div id=\"map\" style=\"height: 800px; width: 100%\"></div>\n\n<script type=\"text/javascript\">\nfunction initMap() {\n    var map = L.map('map').setView([30.00, -30.00], 3);\n    L.tileLayer('http://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png', {\n        attribution: 'Map data &copy; <a href=\"http://openstreetmap.org\">OpenStreetMap</a> contributors',\n        maxZoom: 12,\n        minZoom: 3\n    }).addTo(map);\n\n    var geoMarkers = L.layerGroup().addTo(map);\n\n    var el = angular.element($('#map').parent('.ng-scope'));\n    angular.element(el).ready(function() {\n        window.locationWatcher = el.scope().compiledScope.$watch('locations', function(newValue, oldValue) {\n            console.log(\"new\", newValue)\n            console.log(\"old\", oldValue)\n            var markers = [newValue]\n            angular.forEach(markers, function(point) {\n                var lat = point.lat;\n                var lon = point.lon;\n                var marker = L.marker([lat, lon]).addTo(geoMarkers);\n            });\n        })\n    });\n}\n\nif (window.locationWatcher) {\n    // clear existing watcher otherwise we'll have duplicates\n    window.locationWatcher();\n}\n\n// ensure we only load the script once, seems to cause issues otherwise\nif (window.L) {\n    initMap();\n} else {\n    console.log('Loading Leaflet library');\n    var sc = document.createElement('script');\n    sc.type = 'text/javascript';\n    sc.src = 'https://cdnjs.cloudflare.com/ajax/libs/leaflet/0.7.5/leaflet.js';\n    sc.onload = initMap;\n    sc.onerror = function(err) { alert(err); }\n    document.getElementsByTagName('head')[0].appendChild(sc);\n}\n</script>"}]},"apps":[],"jobName":"paragraph_1496758508140_-1108760902","id":"20170530-154400_814119751","dateCreated":"2017-06-06T16:15:08+0200","status":"FINISHED","progressUpdateIntervalMs":500,"$$hashKey":"object:1191","user":"anonymous","dateFinished":"2017-06-08T14:09:14+0200","dateStarted":"2017-06-08T14:09:12+0200"},{"text":"","dateUpdated":"2017-06-06T16:15:08+0200","config":{"colWidth":12,"editorMode":"ace/mode/scala","results":{},"enabled":true,"editorSetting":{"language":"scala","editOnDblClick":false}},"settings":{"params":{},"forms":{}},"apps":[],"jobName":"paragraph_1496758508141_-1109145650","id":"20170530-154420_778113827","dateCreated":"2017-06-06T16:15:08+0200","status":"READY","errorMessage":"","progressUpdateIntervalMs":500,"$$hashKey":"object:1192"}],"name":"Zeppelin Tutorial/Using Flink for stream processing","id":"2CHR45WV3","angularObjects":{"2CJBS3MTM:shared_process":[],"2CK7CK6H4:shared_process":[],"2CKBDRNSU:shared_process":[],"2CHG7FRMS:shared_process":[],"2CH9GZ2M1:shared_process":[],"2CHPBKU7G:shared_process":[],"2CKUX4VAX:shared_process":[],"2CMVWJCP6:shared_process":[],"2CHSQWZJR:shared_process":[],"2CHGYGUE9:shared_process":[],"2CJWW1EEW:shared_process":[],"2CJ7R35P7:shared_process":[],"2CJRJUJWJ:shared_process":[],"2CMK9DJ5A:shared_process":[],"2CJU51XA2:shared_process":[],"2CKT687GG:shared_process":[],"2CK132JVH:shared_process":[],"2CHJ72Z8N:shared_process":[{"name":"simpleName","object":"world","noteId":"2CHR45WV3"},{"name":"caseName","object":{"name":"world"},"noteId":"2CHR45WV3"}],"2CJNZBAKK:shared_process":[]},"config":{"looknfeel":"default","personalizedMode":"false"},"info":{}}